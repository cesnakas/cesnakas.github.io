"use strict";function _get(e,t,n){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){e=_superPropBase(e,t);if(e){t=Object.getOwnPropertyDescriptor(e,t);return t.get?t.get.call(n):t.value}})(e,t,n||e)}function _superPropBase(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_getPrototypeOf(e)););return e}function ownKeys(t,e){var n,i=Object.keys(t);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(t),e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),i.push.apply(i,n)),i}function _objectSpread(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ownKeys(Object(n),!0).forEach(function(e){_defineProperty(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(n){var i=_isNativeReflectConstruct();return function(){var e,t=_getPrototypeOf(n);return _possibleConstructorReturn(this,i?(e=_getPrototypeOf(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments))}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArrayLimit(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var i,o,r=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(i=n.next()).done)&&(r.push(i.value),!t||r.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return r}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(n="Object"===n&&e.constructor?e.constructor.name:n)||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).bootstrap=t()}(void 0,function(){function r(e){for(;e+=Math.floor(1e6*Math.random()),document.getElementById(e););return e}function f(e){return(e=t(e))&&document.querySelector(e)?e:null}function a(e){return(e=t(e))?document.querySelector(e):null}function s(e){e.dispatchEvent(new Event(k))}function d(e){return w(e)?e.jquery?e[0]:e:"string"==typeof e&&0<e.length?y.findOne(e):null}function h(o,r,a){Object.keys(a).forEach(function(e){var t,n=a[e],i=r[e],t=i&&w(i)?"element":null==(t=i)?"".concat(t):{}.toString.call(t).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(n).test(t))throw new TypeError("".concat(o.toUpperCase(),': Option "').concat(e,'" provided type "').concat(t,'" but expected type "').concat(n,'".'))})}function i(e){return!(!w(e)||0===e.getClientRects().length)&&"visible"===getComputedStyle(e).getPropertyValue("visibility")}function l(e){return!e||e.nodeType!==Node.ELEMENT_NODE||(!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled")))}function c(e){return document.documentElement.attachShadow?"function"!=typeof e.getRootNode?e instanceof ShadowRoot?e:e.parentNode?c(e.parentNode):null:(e=e.getRootNode())instanceof ShadowRoot?e:null:null}function u(){}function p(e){return e.offsetHeight}function g(){var e=window.jQuery;return e&&!document.body.hasAttribute("data-bs-no-jquery")?e:null}function m(){return"rtl"===document.documentElement.dir}function e(i){var e;e=function(){var e,t,n=g();n&&(e=i.NAME,t=n.fn[e],n.fn[e]=i.jQueryInterface,n.fn[e].Constructor=i,n.fn[e].noConflict=function(){return n.fn[e]=t,i.jQueryInterface})},"loading"===document.readyState?(o.length||document.addEventListener("DOMContentLoaded",function(){o.forEach(function(e){return e()})}),o.push(e)):e()}function _(e){"function"==typeof e&&e()}function n(n,i){var e,o,t;2<arguments.length&&void 0!==arguments[2]&&!arguments[2]?_(n):(e=function(e){if(!e)return 0;var t=window.getComputedStyle(e),n=t.transitionDuration,i=t.transitionDelay,e=Number.parseFloat(n),t=Number.parseFloat(i);return e||t?(n=n.split(",")[0],i=i.split(",")[0],(Number.parseFloat(n)+Number.parseFloat(i))*b):0}(i)+5,o=!1,t=function e(t){t.target===i&&(o=!0,i.removeEventListener(k,e),_(n))},i.addEventListener(k,t),setTimeout(function(){o||s(i)},e))}function v(e,t,n,i){var o=e.indexOf(t);return-1===o?e[!n&&i?e.length-1:0]:(t=e.length,o+=n?1:-1,i&&(o=(o+t)%t),e[Math.max(0,Math.min(o,t-1))])}var y={find:function(e){var t,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:document.documentElement;return(t=[]).concat.apply(t,_toConsumableArray(Element.prototype.querySelectorAll.call(n,e)))},findOne:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:document.documentElement;return Element.prototype.querySelector.call(t,e)},children:function(e,t){var n;return(n=[]).concat.apply(n,_toConsumableArray(e.children)).filter(function(e){return e.matches(t)})},parents:function(e,t){for(var n=[],i=e.parentNode;i&&i.nodeType===Node.ELEMENT_NODE&&3!==i.nodeType;)i.matches(t)&&n.push(i),i=i.parentNode;return n},prev:function(e,t){for(var n=e.previousElementSibling;n;){if(n.matches(t))return[n];n=n.previousElementSibling}return[]},next:function(e,t){for(var n=e.nextElementSibling;n;){if(n.matches(t))return[n];n=n.nextElementSibling}return[]}},b=1e3,k="transitionend",t=function(e){var t=e.getAttribute("data-bs-target");if(!t||"#"===t){e=e.getAttribute("href");if(!e||!e.includes("#")&&!e.startsWith("."))return null;t=(e=e.includes("#")&&!e.startsWith("#")?"#".concat(e.split("#")[1]):e)&&"#"!==e?e.trim():null}return t},w=function(e){return!(!e||"object"!==_typeof(e))&&void 0!==(e=void 0!==e.jquery?e[0]:e).nodeType},o=[],E=/[^.]*(?=\..*)\.|.*/,O=/\..*/,A=/::\d+$/,C={},T=1,S={mouseenter:"mouseover",mouseleave:"mouseout"},L=/^(mouseenter|mouseleave)/i,j=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function D(e,t){return t&&"".concat(t,"::").concat(T++)||e.uidEvent||T++}function x(e){var t=D(e);return e.uidEvent=t,C[t]=C[t]||{},C[t]}function I(e,t,n){for(var i=2<arguments.length&&void 0!==n?n:null,o=Object.keys(e),r=0,a=o.length;r<a;r++){var s=e[o[r]];if(s.originalHandler===t&&s.delegationSelector===i)return s}return null}function P(e,t,n){var i="string"==typeof t,n=i?n:t,t=R(e);return[i,n,t=!j.has(t)?e:t]}function N(e,t,n,i,o){var r,a,s,c,l,u,f,d,h,p;"string"==typeof t&&e&&(n||(n=i,i=null),L.test(t)&&(l=function(t){return function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return t.call(this,e)}},i?i=l(i):n=l(n)),r=(c=_slicedToArray(P(t,n,i),3))[0],a=c[1],s=c[2],(l=I(c=(l=x(e))[s]||(l[s]={}),a,r?n:null))?l.oneOff=l.oneOff&&o:(t=D(a,t.replace(E,"")),(i=r?(d=e,h=n,p=i,function e(t){for(var n=d.querySelectorAll(h),i=t.target;i&&i!==this;i=i.parentNode)for(var o=n.length;o--;)if(n[o]===i)return t.delegateTarget=i,e.oneOff&&H.off(d,t.type,h,p),p.apply(i,[t]);return null}):(u=e,f=n,function e(t){return t.delegateTarget=u,e.oneOff&&H.off(u,t.type,f),f.apply(u,[t])})).delegationSelector=r?n:null,i.originalHandler=a,i.oneOff=o,c[i.uidEvent=t]=i,e.addEventListener(s,i,r)))}function M(e,t,n,i,o){i=I(t[n],i,o);i&&(e.removeEventListener(n,i,Boolean(o)),delete t[n][i.uidEvent])}function R(e){return e=e.replace(O,""),S[e]||e}var H={on:function(e,t,n,i){N(e,t,n,i,!1)},one:function(e,t,n,i){N(e,t,n,i,!0)},off:function(a,s,e,t){if("string"==typeof s&&a){var n=_slicedToArray(P(s,e,t),3),i=n[0],t=n[1],o=n[2],r=o!==s,c=x(a),n=s.startsWith(".");if(void 0!==t)return c&&c[o]?void M(a,c,o,t,i?e:null):void 0;n&&Object.keys(c).forEach(function(e){var t,n,i,o,r;t=a,n=c,i=e,o=s.slice(1),r=n[i]||{},Object.keys(r).forEach(function(e){e.includes(o)&&(e=r[e],M(t,n,i,e.originalHandler,e.delegationSelector))})});var l=c[o]||{};Object.keys(l).forEach(function(e){var t=e.replace(A,"");r&&!s.includes(t)||(e=l[e],M(a,c,o,e.originalHandler,e.delegationSelector))})}},trigger:function(e,t,n){if("string"!=typeof t||!e)return null;var i,o=g(),r=R(t),a=t!==r,s=j.has(r),c=!0,l=!0,u=!1,f=null;return a&&o&&(i=o.Event(t,n),o(e).trigger(i),c=!i.isPropagationStopped(),l=!i.isImmediatePropagationStopped(),u=i.isDefaultPrevented()),s?(f=document.createEvent("HTMLEvents")).initEvent(r,c,!0):f=new CustomEvent(t,{bubbles:c,cancelable:!0}),void 0!==n&&Object.keys(n).forEach(function(e){Object.defineProperty(f,e,{get:function(){return n[e]}})}),u&&f.preventDefault(),l&&e.dispatchEvent(f),f.defaultPrevented&&void 0!==i&&i.preventDefault(),f}},B=new Map,W=function(e,t,n){B.has(e)||B.set(e,new Map);e=B.get(e);e.has(t)||0===e.size?e.set(t,n):console.error("Bootstrap doesn't allow more than one instance per element. Bound instance: ".concat(Array.from(e.keys())[0],"."))},q=function(e,t){return B.has(e)&&B.get(e).get(t)||null},z=function(e,t){var n;B.has(e)&&((n=B.get(e)).delete(t),0===n.size&&B.delete(e))},U=function(){function t(e){_classCallCheck(this,t),(e=d(e))&&(this._element=e,W(this._element,this.constructor.DATA_KEY,this))}return _createClass(t,[{key:"dispose",value:function(){var t=this;z(this._element,this.constructor.DATA_KEY),H.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach(function(e){t[e]=null})}},{key:"_queueCallback",value:function(e,t){n(e,t,!(2<arguments.length&&void 0!==arguments[2])||arguments[2])}}],[{key:"getInstance",value:function(e){return q(e,this.DATA_KEY)}},{key:"getOrCreateInstance",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return this.getInstance(e)||new this(e,"object"===_typeof(t)?t:null)}},{key:"VERSION",get:function(){return"5.0.2"}},{key:"NAME",get:function(){throw new Error('You have to implement the static method "NAME", for each component!')}},{key:"DATA_KEY",get:function(){return"bs.".concat(this.NAME)}},{key:"EVENT_KEY",get:function(){return".".concat(this.DATA_KEY)}}]),t}(),F=".".concat("bs.alert"),V="close".concat(F),K="closed".concat(F),X="click".concat(F).concat(".data-api"),Y=function(){_inherits(n,U);var e=_createSuper(n);function n(){return _classCallCheck(this,n),e.apply(this,arguments)}return _createClass(n,[{key:"close",value:function(e){var t=e?this._getRootElement(e):this._element,e=this._triggerCloseEvent(t);null===e||e.defaultPrevented||this._removeElement(t)}},{key:"_getRootElement",value:function(e){return a(e)||e.closest(".".concat("alert"))}},{key:"_triggerCloseEvent",value:function(e){return H.trigger(e,V)}},{key:"_removeElement",value:function(e){var t=this;e.classList.remove("show");var n=e.classList.contains("fade");this._queueCallback(function(){return t._destroyElement(e)},e,n)}},{key:"_destroyElement",value:function(e){e.remove(),H.trigger(e,K)}}],[{key:"NAME",get:function(){return"alert"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=n.getOrCreateInstance(this);"close"===t&&e[t](this)})}},{key:"handleDismiss",value:function(t){return function(e){e&&e.preventDefault(),t.close(this)}}}]),n}();H.on(document,X,'[data-bs-dismiss="alert"]',Y.handleDismiss(new Y)),e(Y);var Q=".".concat("bs.button"),$='[data-bs-toggle="button"]',G="click".concat(Q).concat(".data-api"),Z=function(){_inherits(n,U);var e=_createSuper(n);function n(){return _classCallCheck(this,n),e.apply(this,arguments)}return _createClass(n,[{key:"toggle",value:function(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}}],[{key:"NAME",get:function(){return"button"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=n.getOrCreateInstance(this);"toggle"===t&&e[t]()})}}]),n}();function J(e){return"true"===e||"false"!==e&&(e===Number(e).toString()?Number(e):""===e||"null"===e?null:e)}function ee(e){return e.replace(/[A-Z]/g,function(e){return"-".concat(e.toLowerCase())})}H.on(document,G,$,function(e){e.preventDefault();e=e.target.closest($);Z.getOrCreateInstance(e).toggle()}),e(Z);var te={setDataAttribute:function(e,t,n){e.setAttribute("data-bs-".concat(ee(t)),n)},removeDataAttribute:function(e,t){e.removeAttribute("data-bs-".concat(ee(t)))},getDataAttributes:function(n){if(!n)return{};var i={};return Object.keys(n.dataset).filter(function(e){return e.startsWith("bs")}).forEach(function(e){var t=(t=e.replace(/^bs/,"")).charAt(0).toLowerCase()+t.slice(1,t.length);i[t]=J(n.dataset[e])}),i},getDataAttribute:function(e,t){return J(e.getAttribute("data-bs-".concat(ee(t))))},offset:function(e){e=e.getBoundingClientRect();return{top:e.top+document.body.scrollTop,left:e.left+document.body.scrollLeft}},position:function(e){return{top:e.offsetTop,left:e.offsetLeft}}},ne="carousel",ie=".".concat("bs.carousel"),oe=".data-api",re={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},ae={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},se="next",ce="prev",le="left",ue="right",fe=(_defineProperty(It={},"ArrowLeft",ue),_defineProperty(It,"ArrowRight",le),It),de="slide".concat(ie),he="slid".concat(ie),pe="keydown".concat(ie),ge="mouseenter".concat(ie),me="mouseleave".concat(ie),_e="touchstart".concat(ie),ve="touchmove".concat(ie),ye="touchend".concat(ie),be="pointerdown".concat(ie),ke="pointerup".concat(ie),we="dragstart".concat(ie),Ee="load".concat(ie).concat(oe),Oe="click".concat(ie).concat(oe),Ae="active",Ce=".active.carousel-item",Te=function(){_inherits(o,U);var n=_createSuper(o);function o(e,t){return _classCallCheck(this,o),(e=n.call(this,e))._items=null,e._interval=null,e._activeElement=null,e._isPaused=!1,e._isSliding=!1,e.touchTimeout=null,e.touchStartX=0,e.touchDeltaX=0,e._config=e._getConfig(t),e._indicatorsElement=y.findOne(".carousel-indicators",e._element),e._touchSupported="ontouchstart"in document.documentElement||0<navigator.maxTouchPoints,e._pointerEvent=Boolean(window.PointerEvent),e._addEventListeners(),e}return _createClass(o,[{key:"next",value:function(){this._slide(se)}},{key:"nextWhenVisible",value:function(){!document.hidden&&i(this._element)&&this.next()}},{key:"prev",value:function(){this._slide(ce)}},{key:"pause",value:function(e){e||(this._isPaused=!0),y.findOne(".carousel-item-next, .carousel-item-prev",this._element)&&(s(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}},{key:"cycle",value:function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))}},{key:"to",value:function(e){var t=this;this._activeElement=y.findOne(Ce,this._element);var n=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0))if(this._isSliding)H.one(this._element,he,function(){return t.to(e)});else{if(n===e)return this.pause(),void this.cycle();this._slide(n<e?se:ce,this._items[e])}}},{key:"_getConfig",value:function(e){return e=_objectSpread(_objectSpread(_objectSpread({},re),te.getDataAttributes(this._element)),"object"===_typeof(e)?e:{}),h(ne,e,ae),e}},{key:"_handleSwipe",value:function(){var e=Math.abs(this.touchDeltaX);e<=40||(e=e/this.touchDeltaX,this.touchDeltaX=0,e&&this._slide(0<e?ue:le))}},{key:"_addEventListeners",value:function(){var t=this;this._config.keyboard&&H.on(this._element,pe,function(e){return t._keydown(e)}),"hover"===this._config.pause&&(H.on(this._element,ge,function(e){return t.pause(e)}),H.on(this._element,me,function(e){return t.cycle(e)})),this._config.touch&&this._touchSupported&&this._addTouchEventListeners()}},{key:"_addTouchEventListeners",value:function(){function e(e){!n._pointerEvent||"pen"!==e.pointerType&&"touch"!==e.pointerType?n._pointerEvent||(n.touchStartX=e.touches[0].clientX):n.touchStartX=e.clientX}function t(e){!n._pointerEvent||"pen"!==e.pointerType&&"touch"!==e.pointerType||(n.touchDeltaX=e.clientX-n.touchStartX),n._handleSwipe(),"hover"===n._config.pause&&(n.pause(),n.touchTimeout&&clearTimeout(n.touchTimeout),n.touchTimeout=setTimeout(function(e){return n.cycle(e)},500+n._config.interval))}var n=this;y.find(".carousel-item img",this._element).forEach(function(e){H.on(e,we,function(e){return e.preventDefault()})}),this._pointerEvent?(H.on(this._element,be,e),H.on(this._element,ke,t),this._element.classList.add("pointer-event")):(H.on(this._element,_e,e),H.on(this._element,ve,function(e){e=e,n.touchDeltaX=e.touches&&1<e.touches.length?0:e.touches[0].clientX-n.touchStartX}),H.on(this._element,ye,t))}},{key:"_keydown",value:function(e){var t;/input|textarea/i.test(e.target.tagName)||(t=fe[e.key])&&(e.preventDefault(),this._slide(t))}},{key:"_getItemIndex",value:function(e){return this._items=e&&e.parentNode?y.find(".carousel-item",e.parentNode):[],this._items.indexOf(e)}},{key:"_getItemByOrder",value:function(e,t){return v(this._items,t,e===se,this._config.wrap)}},{key:"_triggerSlideEvent",value:function(e,t){var n=this._getItemIndex(e),i=this._getItemIndex(y.findOne(Ce,this._element));return H.trigger(this._element,de,{relatedTarget:e,direction:t,from:i,to:n})}},{key:"_setActiveIndicatorElement",value:function(e){if(this._indicatorsElement){var t=y.findOne(".active",this._indicatorsElement);t.classList.remove(Ae),t.removeAttribute("aria-current");for(var n=y.find("[data-bs-target]",this._indicatorsElement),i=0;i<n.length;i++)if(Number.parseInt(n[i].getAttribute("data-bs-slide-to"),10)===this._getItemIndex(e)){n[i].classList.add(Ae),n[i].setAttribute("aria-current","true");break}}}},{key:"_updateInterval",value:function(){var e=this._activeElement||y.findOne(Ce,this._element);e&&((e=Number.parseInt(e.getAttribute("data-bs-interval"),10))?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=e):this._config.interval=this._config.defaultInterval||this._config.interval)}},{key:"_slide",value:function(e,t){var n,i=this,o=this._directionToOrder(e),r=y.findOne(Ce,this._element),a=this._getItemIndex(r),s=t||this._getItemByOrder(o,r),c=this._getItemIndex(s),e=Boolean(this._interval),t=o===se,l=t?"carousel-item-start":"carousel-item-end",u=t?"carousel-item-next":"carousel-item-prev",f=this._orderToDirection(o);s&&s.classList.contains(Ae)?this._isSliding=!1:this._isSliding||this._triggerSlideEvent(s,f).defaultPrevented||r&&s&&(this._isSliding=!0,e&&this.pause(),this._setActiveIndicatorElement(s),this._activeElement=s,n=function(){H.trigger(i._element,he,{relatedTarget:s,direction:f,from:a,to:c})},this._element.classList.contains("slide")?(s.classList.add(u),p(s),r.classList.add(l),s.classList.add(l),this._queueCallback(function(){s.classList.remove(l,u),s.classList.add(Ae),r.classList.remove(Ae,u,l),i._isSliding=!1,setTimeout(n,0)},r,!0)):(r.classList.remove(Ae),s.classList.add(Ae),this._isSliding=!1,n()),e&&this.cycle())}},{key:"_directionToOrder",value:function(e){return[ue,le].includes(e)?m()?e===le?ce:se:e===le?se:ce:e}},{key:"_orderToDirection",value:function(e){return[se,ce].includes(e)?m()?e===ce?le:ue:e===ce?ue:le:e}}],[{key:"Default",get:function(){return re}},{key:"NAME",get:function(){return ne}},{key:"carouselInterface",value:function(e,t){var n=o.getOrCreateInstance(e,t),i=n._config;"object"===_typeof(t)&&(i=_objectSpread(_objectSpread({},i),t));e="string"==typeof t?t:i.slide;if("number"==typeof t)n.to(t);else if("string"==typeof e){if(void 0===n[e])throw new TypeError('No method named "'.concat(e,'"'));n[e]()}else i.interval&&i.ride&&(n.pause(),n.cycle())}},{key:"jQueryInterface",value:function(e){return this.each(function(){o.carouselInterface(this,e)})}},{key:"dataApiClickHandler",value:function(e){var t,n,i=a(this);i&&i.classList.contains("carousel")&&(t=_objectSpread(_objectSpread({},te.getDataAttributes(i)),te.getDataAttributes(this)),(n=this.getAttribute("data-bs-slide-to"))&&(t.interval=!1),o.carouselInterface(i,t),n&&o.getInstance(i).to(n),e.preventDefault())}}]),o}();H.on(document,Oe,"[data-bs-slide], [data-bs-slide-to]",Te.dataApiClickHandler),H.on(window,Ee,function(){for(var e=y.find('[data-bs-ride="carousel"]'),t=0,n=e.length;t<n;t++)Te.carouselInterface(e[t],Te.getInstance(e[t]))}),e(Te);var Se="collapse",Le="bs.collapse",je=".".concat(Le),De={toggle:!0,parent:""},xe={toggle:"boolean",parent:"(string|element)"},Ie="show".concat(je),Pe="shown".concat(je),Ne="hide".concat(je),Me="hidden".concat(je),Re="click".concat(je).concat(".data-api"),He="show",Be="collapse",We="collapsing",qe="collapsed",ze='[data-bs-toggle="collapse"]',Ue=function(){_inherits(u,U);var l=_createSuper(u);function u(e,t){var n;_classCallCheck(this,u),(n=l.call(this,e))._isTransitioning=!1,n._config=n._getConfig(t),n._triggerArray=y.find("".concat(ze,'[href="#').concat(n._element.id,'"],')+"".concat(ze,'[data-bs-target="#').concat(n._element.id,'"]'));for(var i=y.find(ze),o=0,r=i.length;o<r;o++){var a=i[o],s=f(a),c=y.find(s).filter(function(e){return e===n._element});null!==s&&c.length&&(n._selector=s,n._triggerArray.push(a))}return n._parent=n._config.parent?n._getParent():null,n._config.parent||n._addAriaAndCollapsedClass(n._element,n._triggerArray),n._config.toggle&&n.toggle(),n}return _createClass(u,[{key:"toggle",value:function(){this._element.classList.contains(He)?this.hide():this.show()}},{key:"show",value:function(){var t=this;if(!this._isTransitioning&&!this._element.classList.contains(He)){this._parent&&0===(n=y.find(".show, .collapsing",this._parent).filter(function(e){return"string"==typeof t._config.parent?e.getAttribute("data-bs-parent")===t._config.parent:e.classList.contains(Be)})).length&&(n=null);var e,n,i=y.findOne(this._selector);if(n){var o,r=n.find(function(e){return i!==e});if((o=r?u.getInstance(r):null)&&o._isTransitioning)return}H.trigger(this._element,Ie).defaultPrevented||(n&&n.forEach(function(e){i!==e&&u.collapseInterface(e,"hide"),o||W(e,Le,null)}),e=this._getDimension(),this._element.classList.remove(Be),this._element.classList.add(We),this._element.style[e]=0,this._triggerArray.length&&this._triggerArray.forEach(function(e){e.classList.remove(qe),e.setAttribute("aria-expanded",!0)}),this.setTransitioning(!0),n=e[0].toUpperCase()+e.slice(1),n="scroll".concat(n),this._queueCallback(function(){t._element.classList.remove(We),t._element.classList.add(Be,He),t._element.style[e]="",t.setTransitioning(!1),H.trigger(t._element,Pe)},this._element,!0),this._element.style[e]="".concat(this._element[n],"px"))}}},{key:"hide",value:function(){var e=this;if(!this._isTransitioning&&this._element.classList.contains(He)&&!H.trigger(this._element,Ne).defaultPrevented){var t=this._getDimension();this._element.style[t]="".concat(this._element.getBoundingClientRect()[t],"px"),p(this._element),this._element.classList.add(We),this._element.classList.remove(Be,He);var n=this._triggerArray.length;if(0<n)for(var i=0;i<n;i++){var o=this._triggerArray[i],r=a(o);r&&!r.classList.contains(He)&&(o.classList.add(qe),o.setAttribute("aria-expanded",!1))}this.setTransitioning(!0);this._element.style[t]="",this._queueCallback(function(){e.setTransitioning(!1),e._element.classList.remove(We),e._element.classList.add(Be),H.trigger(e._element,Me)},this._element,!0)}}},{key:"setTransitioning",value:function(e){this._isTransitioning=e}},{key:"_getConfig",value:function(e){return(e=_objectSpread(_objectSpread({},De),e)).toggle=Boolean(e.toggle),h(Se,e,xe),e}},{key:"_getDimension",value:function(){return this._element.classList.contains("width")?"width":"height"}},{key:"_getParent",value:function(){var n=this,e=this._config.parent,e=d(e),t="".concat(ze,'[data-bs-parent="').concat(e,'"]');return y.find(t,e).forEach(function(e){var t=a(e);n._addAriaAndCollapsedClass(t,[e])}),e}},{key:"_addAriaAndCollapsedClass",value:function(e,t){var n;e&&t.length&&(n=e.classList.contains(He),t.forEach(function(e){n?e.classList.remove(qe):e.classList.add(qe),e.setAttribute("aria-expanded",n)}))}}],[{key:"Default",get:function(){return De}},{key:"NAME",get:function(){return Se}},{key:"collapseInterface",value:function(e,t){var n=u.getInstance(e),i=_objectSpread(_objectSpread(_objectSpread({},De),te.getDataAttributes(e)),"object"===_typeof(t)&&t?t:{});if(!n&&i.toggle&&"string"==typeof t&&/show|hide/.test(t)&&(i.toggle=!1),n=n||new u(e,i),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'.concat(t,'"'));n[t]()}}},{key:"jQueryInterface",value:function(e){return this.each(function(){u.collapseInterface(this,e)})}}]),u}();H.on(document,Re,ze,function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();var n=te.getDataAttributes(this),e=f(this);y.find(e).forEach(function(e){var t=Ue.getInstance(e),t=t?(null===t._parent&&"string"==typeof n.parent&&(t._config.parent=n.parent,t._parent=t._getParent()),"toggle"):n;Ue.collapseInterface(e,t)})}),e(Ue);var Fe="top",Ve="bottom",Ke="right",Xe="left",Ye="auto",Qe=[Fe,Ve,Ke,Xe],$e="start",Ge="end",Ze="clippingParents",Je="viewport",et="popper",tt="reference",nt=Qe.reduce(function(e,t){return e.concat([t+"-"+$e,t+"-"+Ge])},[]),it=[].concat(Qe,[Ye]).reduce(function(e,t){return e.concat([t,t+"-"+$e,t+"-"+Ge])},[]),ot="beforeRead",rt="afterRead",at="beforeMain",st="afterMain",F="beforeWrite",X="afterWrite",ct=[ot,"read",rt,at,"main",st,F,"write",X];function lt(e){return e?(e.nodeName||"").toLowerCase():null}function ut(e){if(null==e)return window;if("[object Window]"===e.toString())return e;e=e.ownerDocument;return e&&e.defaultView||window}function ft(e){return e instanceof ut(e).Element||e instanceof Element}function dt(e){return e instanceof ut(e).HTMLElement||e instanceof HTMLElement}function ht(e){return"undefined"!=typeof ShadowRoot&&(e instanceof ut(e).ShadowRoot||e instanceof ShadowRoot)}Q={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var o=e.state;Object.keys(o.elements).forEach(function(e){var t=o.styles[e]||{},n=o.attributes[e]||{},i=o.elements[e];dt(i)&&lt(i)&&(Object.assign(i.style,t),Object.keys(n).forEach(function(e){var t=n[e];!1===t?i.removeAttribute(e):i.setAttribute(e,!0===t?"":t)}))})},effect:function(e){var i=e.state,o={popper:{position:i.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(i.elements.popper.style,o.popper),i.styles=o,i.elements.arrow&&Object.assign(i.elements.arrow.style,o.arrow),function(){Object.keys(i.elements).forEach(function(e){var t=i.elements[e],n=i.attributes[e]||{},e=Object.keys((i.styles.hasOwnProperty(e)?i.styles:o)[e]).reduce(function(e,t){return e[t]="",e},{});dt(t)&&lt(t)&&(Object.assign(t.style,e),Object.keys(n).forEach(function(e){t.removeAttribute(e)}))})}},requires:["computeStyles"]};function pt(e){return e.split("-")[0]}function gt(e){e=e.getBoundingClientRect();return{width:e.width,height:e.height,top:e.top,right:e.right,bottom:e.bottom,left:e.left,x:e.left,y:e.top}}function mt(e){var t=gt(e),n=e.offsetWidth,i=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-i)<=1&&(i=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:i}}function _t(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&ht(n)){var i=t;do{if(i&&e.isSameNode(i))return!0}while(i=i.parentNode||i.host)}return!1}function vt(e){return ut(e).getComputedStyle(e)}function yt(e){return((ft(e)?e.ownerDocument:e.document)||window.document).documentElement}function bt(e){return"html"===lt(e)?e:e.assignedSlot||e.parentNode||(ht(e)?e.host:null)||yt(e)}function kt(e){return dt(e)&&"fixed"!==vt(e).position?e.offsetParent:null}function wt(e){for(var t,n=ut(e),i=kt(e);i&&(t=i,0<=["table","td","th"].indexOf(lt(t)))&&"static"===vt(i).position;)i=kt(i);return(!i||"html"!==lt(i)&&("body"!==lt(i)||"static"!==vt(i).position))&&(i||function(e){var t=-1!==navigator.userAgent.toLowerCase().indexOf("firefox"),n=-1!==navigator.userAgent.indexOf("Trident");if(n&&dt(e)&&"fixed"===vt(e).position)return null;for(var i=bt(e);dt(i)&&["html","body"].indexOf(lt(i))<0;){var o=vt(i);if("none"!==o.transform||"none"!==o.perspective||"paint"===o.contain||-1!==["transform","perspective"].indexOf(o.willChange)||t&&"filter"===o.willChange||t&&o.filter&&"none"!==o.filter)return i;i=i.parentNode}return null}(e))||n}function Et(e){return 0<=["top","bottom"].indexOf(e)?"x":"y"}var Ot=Math.max,At=Math.min,Ct=Math.round;function Tt(e,t,n){return Ot(e,At(t,n))}function St(){return{top:0,right:0,bottom:0,left:0}}function Lt(e){return Object.assign({},St(),e)}function jt(n,e){return e.reduce(function(e,t){return e[t]=n,e},{})}var G={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n,i=e.state,o=e.name,r=e.options,a=i.elements.arrow,s=i.modifiersData.popperOffsets,c=pt(i.placement),l=Et(c),u=0<=[Xe,Ke].indexOf(c)?"height":"width";a&&s&&(t=r.padding,n=i,e=Lt("number"!=typeof(t="function"==typeof t?t(Object.assign({},n.rects,{placement:n.placement})):t)?t:jt(t,Qe)),c=mt(a),r="y"===l?Fe:Xe,n="y"===l?Ve:Ke,t=i.rects.reference[u]+i.rects.reference[l]-s[l]-i.rects.popper[u],s=s[l]-i.rects.reference[l],a=(a=wt(a))?"y"===l?a.clientHeight||0:a.clientWidth||0:0,r=e[r],n=a-c[u]-e[n],n=Tt(r,s=a/2-c[u]/2+(t/2-s/2),n),i.modifiersData[o]=((o={})[l]=n,o.centerOffset=n-s,o))},effect:function(e){var t=e.state;null!=(e=void 0===(e=e.options.element)?"[data-popper-arrow]":e)&&("string"!=typeof e||(e=t.elements.popper.querySelector(e)))&&_t(t.elements.popper,e)&&(t.elements.arrow=e)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},Dt={top:"auto",right:"auto",bottom:"auto",left:"auto"};function xt(e){var t=e.popper,n=e.popperRect,i=e.placement,o=e.offsets,r=e.position,a=e.gpuAcceleration,s=e.adaptive,c=e.roundOffsets,l=!0===c?(h=(g=o).x,p=g.y,g=window.devicePixelRatio||1,{x:Ct(Ct(h*g)/g)||0,y:Ct(Ct(p*g)/g)||0}):"function"==typeof c?c(o):o,u=l.x,f=void 0===u?0:u,d=l.y,e=void 0===d?0:d,h=o.hasOwnProperty("x"),p=o.hasOwnProperty("y"),g=Xe,c=Fe,u=window;s&&(l="clientHeight",d="clientWidth",(o=wt(t))===ut(t)&&"static"!==vt(o=yt(t)).position&&(l="scrollHeight",d="scrollWidth"),i===Fe&&(c=Ve,e-=o[l]-n.height,e*=a?1:-1),i===Xe&&(g=Ke,f-=o[d]-n.width,f*=a?1:-1));var s=Object.assign({position:r},s&&Dt);return a?Object.assign({},s,((a={})[c]=p?"0":"",a[g]=h?"0":"",a.transform=(u.devicePixelRatio||1)<2?"translate("+f+"px, "+e+"px)":"translate3d("+f+"px, "+e+"px, 0)",a)):Object.assign({},s,((s={})[c]=p?e+"px":"",s[g]=h?f+"px":"",s.transform="",s))}var It={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,e=void 0===(i=n.gpuAcceleration)||i,i=void 0===(i=n.adaptive)||i,n=void 0===(n=n.roundOffsets)||n,e={placement:pt(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:e};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,xt(Object.assign({},e,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:i,roundOffsets:n})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,xt(Object.assign({},e,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:n})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},Pt={passive:!0};var ie={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,i=e.options,o=void 0===(e=i.scroll)||e,r=void 0===(i=i.resize)||i,a=ut(t.elements.popper),s=[].concat(t.scrollParents.reference,t.scrollParents.popper);return o&&s.forEach(function(e){e.addEventListener("scroll",n.update,Pt)}),r&&a.addEventListener("resize",n.update,Pt),function(){o&&s.forEach(function(e){e.removeEventListener("scroll",n.update,Pt)}),r&&a.removeEventListener("resize",n.update,Pt)}},data:{}},Nt={left:"right",right:"left",bottom:"top",top:"bottom"};function Mt(e){return e.replace(/left|right|bottom|top/g,function(e){return Nt[e]})}var Rt={start:"end",end:"start"};function Ht(e){return e.replace(/start|end/g,function(e){return Rt[e]})}function Bt(e){e=ut(e);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function Wt(e){return gt(yt(e)).left+Bt(e).scrollLeft}function qt(e){var t=vt(e),n=t.overflow,e=t.overflowX,t=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+t+e)}function zt(e,t){void 0===t&&(t=[]);var n=function e(t){return 0<=["html","body","#document"].indexOf(lt(t))?t.ownerDocument.body:dt(t)&&qt(t)?t:e(bt(t))}(e),e=n===(null==(i=e.ownerDocument)?void 0:i.body),i=ut(n),n=e?[i].concat(i.visualViewport||[],qt(n)?n:[]):n,t=t.concat(n);return e?t:t.concat(zt(bt(n)))}function Ut(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function Ft(e,t){return t===Je?Ut((r=ut(o=e),a=yt(o),s=r.visualViewport,c=a.clientWidth,l=a.clientHeight,a=r=0,s&&(c=s.width,l=s.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(r=s.offsetLeft,a=s.offsetTop)),{width:c,height:l,x:r+Wt(o),y:a})):dt(t)?((i=gt(n=t)).top=i.top+n.clientTop,i.left=i.left+n.clientLeft,i.bottom=i.top+n.clientHeight,i.right=i.left+n.clientWidth,i.width=n.clientWidth,i.height=n.clientHeight,i.x=i.left,i.y=i.top,i):Ut((o=yt(e),a=yt(o),t=Bt(o),i=null==(n=o.ownerDocument)?void 0:n.body,e=Ot(a.scrollWidth,a.clientWidth,i?i.scrollWidth:0,i?i.clientWidth:0),n=Ot(a.scrollHeight,a.clientHeight,i?i.scrollHeight:0,i?i.clientHeight:0),o=-t.scrollLeft+Wt(o),t=-t.scrollTop,"rtl"===vt(i||a).direction&&(o+=Ot(a.clientWidth,i?i.clientWidth:0)-e),{width:e,height:n,x:o,y:t}));var n,i,o,r,a,s,c,l}function Vt(n,e,t){var i,o,r,e="clippingParents"===e?(o=zt(bt(i=n)),ft(r=0<=["absolute","fixed"].indexOf(vt(i).position)&&dt(i)?wt(i):i)?o.filter(function(e){return ft(e)&&_t(e,r)&&"body"!==lt(e)}):[]):[].concat(e),e=[].concat(e,[t]),t=e[0],t=e.reduce(function(e,t){t=Ft(n,t);return e.top=Ot(t.top,e.top),e.right=At(t.right,e.right),e.bottom=At(t.bottom,e.bottom),e.left=Ot(t.left,e.left),e},Ft(n,t));return t.width=t.right-t.left,t.height=t.bottom-t.top,t.x=t.left,t.y=t.top,t}function Kt(e){return e.split("-")[1]}function Xt(e){var t,n=e.reference,i=e.element,o=e.placement,e=o?pt(o):null,o=o?Kt(o):null,r=n.x+n.width/2-i.width/2,a=n.y+n.height/2-i.height/2;switch(e){case Fe:t={x:r,y:n.y-i.height};break;case Ve:t={x:r,y:n.y+n.height};break;case Ke:t={x:n.x+n.width,y:a};break;case Xe:t={x:n.x-i.width,y:a};break;default:t={x:n.x,y:n.y}}var s=e?Et(e):null;if(null!=s){var c="y"===s?"height":"width";switch(o){case $e:t[s]=t[s]-(n[c]/2-i[c]/2);break;case Ge:t[s]=t[s]+(n[c]/2-i[c]/2)}}return t}function Yt(e,t){var i,n=t=void 0===t?{}:t,o=n.placement,r=void 0===o?e.placement:o,a=n.boundary,s=void 0===a?Ze:a,c=n.rootBoundary,l=void 0===c?Je:c,t=n.elementContext,o=void 0===t?et:t,a=n.altBoundary,c=void 0!==a&&a,t=n.padding,a=void 0===t?0:t,n=Lt("number"!=typeof a?a:jt(a,Qe)),t=e.elements.reference,a=e.rects.popper,c=e.elements[c?o===et?tt:et:o],s=Vt(ft(c)?c:c.contextElement||yt(e.elements.popper),s,l),l=gt(t),t=Xt({reference:l,element:a,strategy:"absolute",placement:r}),t=Ut(Object.assign({},a,t)),l=o===et?t:l,u={top:s.top-l.top+n.top,bottom:l.bottom-s.bottom+n.bottom,left:s.left-l.left+n.left,right:l.right-s.right+n.right},e=e.modifiersData.offset;return o===et&&e&&(i=e[r],Object.keys(u).forEach(function(e){var t=0<=[Ke,Ve].indexOf(e)?1:-1,n=0<=[Fe,Ve].indexOf(e)?"y":"x";u[e]+=i[n]*t})),u}oe={name:"flip",enabled:!0,phase:"main",fn:function(e){var f=e.state,t=e.options,n=e.name;if(!f.modifiersData[n]._skip){for(var i=t.mainAxis,o=void 0===i||i,e=t.altAxis,r=void 0===e||e,i=t.fallbackPlacements,d=t.padding,h=t.boundary,p=t.rootBoundary,a=t.altBoundary,e=t.flipVariations,g=void 0===e||e,m=t.allowedAutoPlacements,e=f.options.placement,t=pt(e),t=i||(t===e||!g?[Mt(e)]:function(e){if(pt(e)===Ye)return[];var t=Mt(e);return[Ht(e),t,Ht(t)]}(e)),s=[e].concat(t).reduce(function(e,t){return e.concat(pt(t)===Ye?(n=f,o=i=void 0===(i={placement:t,boundary:h,rootBoundary:p,padding:d,flipVariations:g,allowedAutoPlacements:m})?{}:i,e=o.placement,r=o.boundary,a=o.rootBoundary,s=o.padding,i=o.flipVariations,c=void 0===(o=o.allowedAutoPlacements)?it:o,l=Kt(e),e=l?i?nt:nt.filter(function(e){return Kt(e)===l}):Qe,u=(i=0===(i=e.filter(function(e){return 0<=c.indexOf(e)})).length?e:i).reduce(function(e,t){return e[t]=Yt(n,{placement:t,boundary:r,rootBoundary:a,padding:s})[pt(t)],e},{}),Object.keys(u).sort(function(e,t){return u[e]-u[t]})):t);var n,i,o,r,a,s,c,l,u},[]),c=f.rects.reference,l=f.rects.popper,u=new Map,_=!0,v=s[0],y=0;y<s.length;y++){var b=s[y],k=pt(b),w=Kt(b)===$e,E=0<=[Fe,Ve].indexOf(k),O=E?"width":"height",A=Yt(f,{placement:b,boundary:h,rootBoundary:p,altBoundary:a,padding:d}),E=E?w?Ke:Xe:w?Ve:Fe;c[O]>l[O]&&(E=Mt(E));w=Mt(E),O=[];if(o&&O.push(A[k]<=0),r&&O.push(A[E]<=0,A[w]<=0),O.every(function(e){return e})){v=b,_=!1;break}u.set(b,O)}if(_)for(var C=g?3:1;0<C;C--)if("break"===function(t){var e=s.find(function(e){e=u.get(e);if(e)return e.slice(0,t).every(function(e){return e})});if(e)return v=e,"break"}(C))break;f.placement!==v&&(f.modifiersData[n]._skip=!0,f.placement=v,f.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function Qt(e,t,n){return{top:e.top-t.height-(n=void 0===n?{x:0,y:0}:n).y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function $t(t){return[Fe,Ke,Ve,Xe].some(function(e){return 0<=t[e]})}Oe={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,i=t.rects.reference,o=t.rects.popper,r=t.modifiersData.preventOverflow,a=Yt(t,{elementContext:"reference"}),e=Yt(t,{altBoundary:!0}),i=Qt(a,i),e=Qt(e,o,r),o=$t(i),r=$t(e);t.modifiersData[n]={referenceClippingOffsets:i,popperEscapeOffsets:e,isReferenceHidden:o,hasPopperEscaped:r},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":o,"data-popper-escaped":r})}};Ee={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var a=e.state,t=e.options,n=e.name,s=void 0===(i=t.offset)?[0,0]:i,e=it.reduce(function(e,t){var n,i,o,r;return e[t]=(n=t,i=a.rects,o=s,r=pt(n),t=0<=[Xe,Fe].indexOf(r)?-1:1,o=(o=(n="function"==typeof o?o(Object.assign({},i,{placement:n})):o)[0])||0,n=((n=n[1])||0)*t,0<=[Xe,Ke].indexOf(r)?{x:n,y:o}:{x:o,y:n}),e},{}),i=(t=e[a.placement]).x,t=t.y;null!=a.modifiersData.popperOffsets&&(a.modifiersData.popperOffsets.x+=i,a.modifiersData.popperOffsets.y+=t),a.modifiersData[n]=e}};je={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,e=e.name;t.modifiersData[e]=Xt({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}};Re={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,i=e.name,o=void 0===(w=n.mainAxis)||w,r=void 0!==(E=n.altAxis)&&E,a=n.boundary,s=n.rootBoundary,c=n.altBoundary,l=n.padding,u=n.tether,f=void 0===u||u,d=n.tetherOffset,h=void 0===d?0:d,p=Yt(t,{boundary:a,rootBoundary:s,padding:l,altBoundary:c}),g=pt(t.placement),m=Kt(t.placement),_=!m,v=Et(g),y="x"===v?"y":"x",b=t.modifiersData.popperOffsets,k=t.rects.reference,e=t.rects.popper,w="function"==typeof h?h(Object.assign({},t.rects,{placement:t.placement})):h,E={x:0,y:0};b&&((o||r)&&(u="y"===v?"height":"width",n=b[v],a=b[v]+p[d="y"===v?Fe:Xe],l=b[v]-p[s="y"===v?Ve:Ke],c=f?-e[u]/2:0,g=(m===$e?k:e)[u],h=m===$e?-e[u]:-k[u],m=t.elements.arrow,e=f&&m?mt(m):{width:0,height:0},d=(m=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:St())[d],s=m[s],e=Tt(0,k[u],e[u]),d=_?k[u]/2-c-e-d-w:g-e-d-w,e=_?-k[u]/2+c+e+s+w:h+e+s+w,w=(s=t.elements.arrow&&wt(t.elements.arrow))?"y"===v?s.clientTop||0:s.clientLeft||0:0,s=t.modifiersData.offset?t.modifiersData.offset[t.placement][v]:0,w=b[v]+d-s-w,s=b[v]+e-s,o&&(l=Tt(f?At(a,w):a,n,f?Ot(l,s):l),b[v]=l,E[v]=l-n),r&&(r=(n=b[y])+p["x"===v?Fe:Xe],v=n-p["x"===v?Ve:Ke],v=Tt(f?At(r,w):r,n,f?Ot(v,s):v),b[y]=v,E[y]=v-n)),t.modifiersData[i]=E)},requiresIfExists:["offset"]};function Gt(e,t,n){void 0===n&&(n=!1);var i=yt(t),o=gt(e),r=dt(t),a={scrollLeft:0,scrollTop:0},e={x:0,y:0};return!r&&n||("body"===lt(t)&&!qt(i)||(a=(n=t)!==ut(n)&&dt(n)?{scrollLeft:n.scrollLeft,scrollTop:n.scrollTop}:Bt(n)),dt(t)?((e=gt(t)).x+=t.clientLeft,e.y+=t.clientTop):i&&(e.x=Wt(i))),{x:o.left+a.scrollLeft-e.x,y:o.top+a.scrollTop-e.y,width:o.width,height:o.height}}function Zt(e){var n=new Map,i=new Set,o=[];return e.forEach(function(e){n.set(e.name,e)}),e.forEach(function(e){i.has(e.name)||!function t(e){i.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach(function(e){i.has(e)||(e=n.get(e))&&t(e)}),o.push(e)}(e)}),o}var Jt={placement:"bottom",modifiers:[],strategy:"absolute"};function en(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some(function(e){return!(e&&"function"==typeof e.getBoundingClientRect)})}function tn(e){var t=e=void 0===e?{}:e,e=t.defaultModifiers,f=void 0===e?[]:e,t=t.defaultOptions,d=void 0===t?Jt:t;return function(i,o,t){void 0===t&&(t=d);var n,r,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},Jt,d),modifiersData:{},elements:{reference:i,popper:o},attributes:{},styles:{}},s=[],c=!1,l={state:a,setOptions:function(e){u(),a.options=Object.assign({},d,a.options,e),a.scrollParents={reference:ft(i)?zt(i):i.contextElement?zt(i.contextElement):[],popper:zt(o)};var n,t,e=(e=[].concat(f,a.options.modifiers),t=e.reduce(function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e},{}),e=Object.keys(t).map(function(e){return t[e]}),n=Zt(e),ct.reduce(function(e,t){return e.concat(n.filter(function(e){return e.phase===t}))},[]));return a.orderedModifiers=e.filter(function(e){return e.enabled}),a.orderedModifiers.forEach(function(e){var t=e.name,n=e.options,e=e.effect;"function"==typeof e&&(n=e({state:a,name:t,instance:l,options:void 0===n?{}:n}),s.push(n||function(){}))}),l.update()},forceUpdate:function(){if(!c){var e=a.elements,t=e.reference,e=e.popper;if(en(t,e)){a.rects={reference:Gt(t,wt(e),"fixed"===a.options.strategy),popper:mt(e)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach(function(e){return a.modifiersData[e.name]=Object.assign({},e.data)});for(var n,i,o,r=0;r<a.orderedModifiers.length;r++)!0!==a.reset?(n=(o=a.orderedModifiers[r]).fn,i=o.options,o=o.name,"function"==typeof n&&(a=n({state:a,options:void 0===i?{}:i,name:o,instance:l})||a)):(a.reset=!1,r=-1)}}},update:(n=function(){return new Promise(function(e){l.forceUpdate(),e(a)})},function(){return r=r||new Promise(function(e){Promise.resolve().then(function(){r=void 0,e(n())})})}),destroy:function(){u(),c=!0}};return en(i,o)&&l.setOptions(t).then(function(e){!c&&t.onFirstUpdate&&t.onFirstUpdate(e)}),l;function u(){s.forEach(function(e){return e()}),s=[]}}}var nn=tn({defaultModifiers:[ie,je,It,Q,Ee,oe,Re,G,Oe]}),on=Object.freeze({__proto__:null,popperGenerator:tn,detectOverflow:Yt,createPopperBase:tn(),createPopper:nn,createPopperLite:tn({defaultModifiers:[ie,je,It,Q]}),top:Fe,bottom:Ve,right:Ke,left:Xe,auto:Ye,basePlacements:Qe,start:$e,end:Ge,clippingParents:Ze,viewport:Je,popper:et,reference:tt,variationPlacements:nt,placements:it,beforeRead:ot,read:"read",afterRead:rt,beforeMain:at,main:"main",afterMain:st,beforeWrite:F,write:"write",afterWrite:X,modifierPhases:ct,applyStyles:Q,arrow:G,computeStyles:It,eventListeners:ie,flip:oe,hide:Oe,offset:Ee,popperOffsets:je,preventOverflow:Re}),rn="dropdown",Oe=".".concat("bs.dropdown"),Ee=".data-api",an="Escape",sn="ArrowUp",cn="ArrowDown",ln=new RegExp("".concat(sn,"|").concat(cn,"|").concat(an)),un="hide".concat(Oe),fn="hidden".concat(Oe),dn="show".concat(Oe),hn="shown".concat(Oe),pn="click".concat(Oe),je="click".concat(Oe).concat(Ee),Re="keydown".concat(Oe).concat(Ee),Ee="keyup".concat(Oe).concat(Ee),gn="show",mn='[data-bs-toggle="dropdown"]',_n=".dropdown-menu",vn=m()?"top-end":"top-start",yn=m()?"top-start":"top-end",bn=m()?"bottom-end":"bottom-start",kn=m()?"bottom-start":"bottom-end",wn=m()?"left-start":"right-start",En=m()?"right-start":"left-start",On={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},An={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"},Cn=function(){_inherits(c,U);var n=_createSuper(c);function c(e,t){return _classCallCheck(this,c),(e=n.call(this,e))._popper=null,e._config=e._getConfig(t),e._menu=e._getMenuElement(),e._inNavbar=e._detectNavbar(),e._addEventListeners(),e}return _createClass(c,[{key:"toggle",value:function(){l(this._element)||(this._element.classList.contains(gn)?this.hide():this.show())}},{key:"show",value:function(){if(!l(this._element)&&!this._menu.classList.contains(gn)){var e=c.getParentFromElement(this._element),t={relatedTarget:this._element};if(!H.trigger(this._element,dn,t).defaultPrevented){if(this._inNavbar)te.setDataAttribute(this._menu,"popper","none");else{if(void 0===on)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");var n=this._element;"parent"===this._config.reference?n=e:w(this._config.reference)?n=d(this._config.reference):"object"===_typeof(this._config.reference)&&(n=this._config.reference);var i=this._getPopperConfig(),o=i.modifiers.find(function(e){return"applyStyles"===e.name&&!1===e.enabled});this._popper=nn(n,this._menu,i),o&&te.setDataAttribute(this._menu,"popper","static")}"ontouchstart"in document.documentElement&&!e.closest(".navbar-nav")&&(e=[]).concat.apply(e,_toConsumableArray(document.body.children)).forEach(function(e){return H.on(e,"mouseover",u)}),this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.toggle(gn),this._element.classList.toggle(gn),H.trigger(this._element,hn,t)}}}},{key:"hide",value:function(){var e;!l(this._element)&&this._menu.classList.contains(gn)&&(e={relatedTarget:this._element},this._completeHide(e))}},{key:"dispose",value:function(){this._popper&&this._popper.destroy(),_get(_getPrototypeOf(c.prototype),"dispose",this).call(this)}},{key:"update",value:function(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}},{key:"_addEventListeners",value:function(){var t=this;H.on(this._element,pn,function(e){e.preventDefault(),t.toggle()})}},{key:"_completeHide",value:function(e){var t;H.trigger(this._element,un,e).defaultPrevented||("ontouchstart"in document.documentElement&&(t=[]).concat.apply(t,_toConsumableArray(document.body.children)).forEach(function(e){return H.off(e,"mouseover",u)}),this._popper&&this._popper.destroy(),this._menu.classList.remove(gn),this._element.classList.remove(gn),this._element.setAttribute("aria-expanded","false"),te.removeDataAttribute(this._menu,"popper"),H.trigger(this._element,fn,e))}},{key:"_getConfig",value:function(e){if(e=_objectSpread(_objectSpread(_objectSpread({},this.constructor.Default),te.getDataAttributes(this._element)),e),h(rn,e,this.constructor.DefaultType),"object"===_typeof(e.reference)&&!w(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError("".concat(rn.toUpperCase(),': Option "reference" provided type "object" without a required "getBoundingClientRect" method.'));return e}},{key:"_getMenuElement",value:function(){return y.next(this._element,_n)[0]}},{key:"_getPlacement",value:function(){var e=this._element.parentNode;if(e.classList.contains("dropend"))return wn;if(e.classList.contains("dropstart"))return En;var t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?yn:vn:t?kn:bn}},{key:"_detectNavbar",value:function(){return null!==this._element.closest(".".concat("navbar"))}},{key:"_getOffset",value:function(){var t=this,n=this._config.offset;return"string"==typeof n?n.split(",").map(function(e){return Number.parseInt(e,10)}):"function"==typeof n?function(e){return n(e,t._element)}:n}},{key:"_getPopperConfig",value:function(){var e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return"static"===this._config.display&&(e.modifiers=[{name:"applyStyles",enabled:!1}]),_objectSpread(_objectSpread({},e),"function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig)}},{key:"_selectMenuItem",value:function(e){var t=e.key,n=e.target,e=y.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(i);e.length&&v(e,n,t===cn,!e.includes(n)).focus()}}],[{key:"Default",get:function(){return On}},{key:"DefaultType",get:function(){return An}},{key:"NAME",get:function(){return rn}},{key:"dropdownInterface",value:function(e,t){e=c.getOrCreateInstance(e,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'.concat(t,'"'));e[t]()}}},{key:"jQueryInterface",value:function(e){return this.each(function(){c.dropdownInterface(this,e)})}},{key:"clearMenus",value:function(e){if(!e||2!==e.button&&("keyup"!==e.type||"Tab"===e.key))for(var t=y.find(mn),n=0,i=t.length;n<i;n++){var o=c.getInstance(t[n]);if(o&&!1!==o._config.autoClose&&o._element.classList.contains(gn)){var r={relatedTarget:o._element};if(e){var a=e.composedPath(),s=a.includes(o._menu);if(a.includes(o._element)||"inside"===o._config.autoClose&&!s||"outside"===o._config.autoClose&&s)continue;if(o._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;"click"===e.type&&(r.clickEvent=e)}o._completeHide(r)}}}},{key:"getParentFromElement",value:function(e){return a(e)||e.parentNode}},{key:"dataApiKeydownHandler",value:function(e){var t=this;if(/input|textarea/i.test(e.target.tagName)?!("Space"===e.key||e.key!==an&&(e.key!==cn&&e.key!==sn||e.target.closest(_n))):ln.test(e.key)){var n=this.classList.contains(gn);if((n||e.key!==an)&&(e.preventDefault(),e.stopPropagation(),!l(this))){var i=function(){return t.matches(mn)?t:y.prev(t,mn)[0]};return e.key===an?(i().focus(),void c.clearMenus()):e.key===sn||e.key===cn?(n||i().click(),void c.getInstance(i())._selectMenuItem(e)):void(n&&"Space"!==e.key||c.clearMenus())}}}}]),c}();H.on(document,Re,mn,Cn.dataApiKeydownHandler),H.on(document,Re,_n,Cn.dataApiKeydownHandler),H.on(document,je,Cn.clearMenus),H.on(document,Ee,Cn.clearMenus),H.on(document,je,mn,function(e){e.preventDefault(),Cn.dropdownInterface(this)}),e(Cn);var Tn=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Sn=".sticky-top",Ln=function(){function e(){_classCallCheck(this,e),this._element=document.body}return _createClass(e,[{key:"getWidth",value:function(){var e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}},{key:"hide",value:function(){var t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,"paddingRight",function(e){return e+t}),this._setElementAttributes(Tn,"paddingRight",function(e){return e+t}),this._setElementAttributes(Sn,"marginRight",function(e){return e-t})}},{key:"_disableOverFlow",value:function(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}},{key:"_setElementAttributes",value:function(e,n,i){var o=this,r=this.getWidth();this._applyManipulationCallback(e,function(e){var t;e!==o._element&&window.innerWidth>e.clientWidth+r||(o._saveInitialAttribute(e,n),t=window.getComputedStyle(e)[n],e.style[n]="".concat(i(Number.parseFloat(t)),"px"))})}},{key:"reset",value:function(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,"paddingRight"),this._resetElementAttributes(Tn,"paddingRight"),this._resetElementAttributes(Sn,"marginRight")}},{key:"_saveInitialAttribute",value:function(e,t){var n=e.style[t];n&&te.setDataAttribute(e,t,n)}},{key:"_resetElementAttributes",value:function(e,n){this._applyManipulationCallback(e,function(e){var t=te.getDataAttribute(e,n);void 0===t?e.style.removeProperty(n):(te.removeDataAttribute(e,n),e.style[n]=t)})}},{key:"_applyManipulationCallback",value:function(e,t){w(e)?t(e):y.find(e,this._element).forEach(t)}},{key:"isOverflowing",value:function(){return 0<this.getWidth()}}]),e}(),jn={isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},Dn={isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"},xn="backdrop",In="mousedown.bs.".concat(xn),Pn=function(){function t(e){_classCallCheck(this,t),this._config=this._getConfig(e),this._isAppended=!1,this._element=null}return _createClass(t,[{key:"show",value:function(e){this._config.isVisible?(this._append(),this._config.isAnimated&&p(this._getElement()),this._getElement().classList.add("show"),this._emulateAnimation(function(){_(e)})):_(e)}},{key:"hide",value:function(e){var t=this;this._config.isVisible?(this._getElement().classList.remove("show"),this._emulateAnimation(function(){t.dispose(),_(e)})):_(e)}},{key:"_getElement",value:function(){var e;return this._element||((e=document.createElement("div")).className="modal-backdrop",this._config.isAnimated&&e.classList.add("fade"),this._element=e),this._element}},{key:"_getConfig",value:function(e){return(e=_objectSpread(_objectSpread({},jn),"object"===_typeof(e)?e:{})).rootElement=d(e.rootElement),h(xn,e,Dn),e}},{key:"_append",value:function(){var e=this;this._isAppended||(this._config.rootElement.appendChild(this._getElement()),H.on(this._getElement(),In,function(){_(e._config.clickCallback)}),this._isAppended=!0)}},{key:"dispose",value:function(){this._isAppended&&(H.off(this._element,In),this._element.remove(),this._isAppended=!1)}},{key:"_emulateAnimation",value:function(e){n(e,this._getElement(),this._config.isAnimated)}}]),t}(),Nn=".".concat("bs.modal"),Mn={backdrop:!0,keyboard:!0,focus:!0},Rn={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},Hn="hide".concat(Nn),Bn="hidePrevented".concat(Nn),Wn="hidden".concat(Nn),qn="show".concat(Nn),zn="shown".concat(Nn),Un="focusin".concat(Nn),Fn="resize".concat(Nn),Vn="click.dismiss".concat(Nn),Kn="keydown.dismiss".concat(Nn),Xn="mouseup.dismiss".concat(Nn),Yn="mousedown.dismiss".concat(Nn),Re="click".concat(Nn).concat(".data-api"),Qn="modal-open",$n="modal-static",Gn=function(){_inherits(i,U);var n=_createSuper(i);function i(e,t){return _classCallCheck(this,i),(e=n.call(this,e))._config=e._getConfig(t),e._dialog=y.findOne(".modal-dialog",e._element),e._backdrop=e._initializeBackDrop(),e._isShown=!1,e._ignoreBackdropClick=!1,e._isTransitioning=!1,e._scrollBar=new Ln,e}return _createClass(i,[{key:"toggle",value:function(e){return this._isShown?this.hide():this.show(e)}},{key:"show",value:function(e){var t=this;this._isShown||this._isTransitioning||H.trigger(this._element,qn,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isAnimated()&&(this._isTransitioning=!0),this._scrollBar.hide(),document.body.classList.add(Qn),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),H.on(this._element,Vn,'[data-bs-dismiss="modal"]',function(e){return t.hide(e)}),H.on(this._dialog,Yn,function(){H.one(t._element,Xn,function(e){e.target===t._element&&(t._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return t._showElement(e)}))}},{key:"hide",value:function(e){var t=this;e&&["A","AREA"].includes(e.target.tagName)&&e.preventDefault(),this._isShown&&!this._isTransitioning&&(H.trigger(this._element,Hn).defaultPrevented||(this._isShown=!1,(e=this._isAnimated())&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),H.off(document,Un),this._element.classList.remove("show"),H.off(this._element,Vn),H.off(this._dialog,Yn),this._queueCallback(function(){return t._hideModal()},this._element,e)))}},{key:"dispose",value:function(){[window,this._dialog].forEach(function(e){return H.off(e,Nn)}),this._backdrop.dispose(),_get(_getPrototypeOf(i.prototype),"dispose",this).call(this),H.off(document,Un)}},{key:"handleUpdate",value:function(){this._adjustDialog()}},{key:"_initializeBackDrop",value:function(){return new Pn({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}},{key:"_getConfig",value:function(e){return e=_objectSpread(_objectSpread(_objectSpread({},Mn),te.getDataAttributes(this._element)),"object"===_typeof(e)?e:{}),h("modal",e,Rn),e}},{key:"_showElement",value:function(e){var t=this,n=this._isAnimated(),i=y.findOne(".modal-body",this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,i&&(i.scrollTop=0),n&&p(this._element),this._element.classList.add("show"),this._config.focus&&this._enforceFocus();this._queueCallback(function(){t._config.focus&&t._element.focus(),t._isTransitioning=!1,H.trigger(t._element,zn,{relatedTarget:e})},this._dialog,n)}},{key:"_enforceFocus",value:function(){var t=this;H.off(document,Un),H.on(document,Un,function(e){document===e.target||t._element===e.target||t._element.contains(e.target)||t._element.focus()})}},{key:"_setEscapeEvent",value:function(){var t=this;this._isShown?H.on(this._element,Kn,function(e){t._config.keyboard&&"Escape"===e.key?(e.preventDefault(),t.hide()):t._config.keyboard||"Escape"!==e.key||t._triggerBackdropTransition()}):H.off(this._element,Kn)}},{key:"_setResizeEvent",value:function(){var e=this;this._isShown?H.on(window,Fn,function(){return e._adjustDialog()}):H.off(window,Fn)}},{key:"_hideModal",value:function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide(function(){document.body.classList.remove(Qn),e._resetAdjustments(),e._scrollBar.reset(),H.trigger(e._element,Wn)})}},{key:"_showBackdrop",value:function(e){var t=this;H.on(this._element,Vn,function(e){t._ignoreBackdropClick?t._ignoreBackdropClick=!1:e.target===e.currentTarget&&(!0===t._config.backdrop?t.hide():"static"===t._config.backdrop&&t._triggerBackdropTransition())}),this._backdrop.show(e)}},{key:"_isAnimated",value:function(){return this._element.classList.contains("fade")}},{key:"_triggerBackdropTransition",value:function(){var e,t,n,i,o,r=this;H.trigger(this._element,Bn).defaultPrevented||(e=this._element,t=e.classList,n=e.scrollHeight,i=e.style,!(o=n>document.documentElement.clientHeight)&&"hidden"===i.overflowY||t.contains($n)||(o||(i.overflowY="hidden"),t.add($n),this._queueCallback(function(){t.remove($n),o||r._queueCallback(function(){i.overflowY=""},r._dialog)},this._dialog),this._element.focus()))}},{key:"_adjustDialog",value:function(){var e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),n=0<t;(!n&&e&&!m()||n&&!e&&m())&&(this._element.style.paddingLeft="".concat(t,"px")),(n&&!e&&!m()||!n&&e&&m())&&(this._element.style.paddingRight="".concat(t,"px"))}},{key:"_resetAdjustments",value:function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}}],[{key:"Default",get:function(){return Mn}},{key:"NAME",get:function(){return"modal"}},{key:"jQueryInterface",value:function(t,n){return this.each(function(){var e=i.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'.concat(t,'"'));e[t](n)}})}}]),i}();H.on(document,Re,'[data-bs-toggle="modal"]',function(e){var t=this,n=a(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),H.one(n,qn,function(e){e.defaultPrevented||H.one(n,Wn,function(){i(t)&&t.focus()})}),Gn.getOrCreateInstance(n).toggle(this)}),e(Gn);var Zn="offcanvas",Ee=".".concat("bs.offcanvas"),je=".data-api",Re="load".concat(Ee).concat(je),Jn={backdrop:!0,keyboard:!0,scroll:!1},ei={backdrop:"boolean",keyboard:"boolean",scroll:"boolean"},ti=".offcanvas.show",ni="show".concat(Ee),ii="shown".concat(Ee),oi="hide".concat(Ee),ri="hidden".concat(Ee),ai="focusin".concat(Ee),je="click".concat(Ee).concat(je),si="click.dismiss".concat(Ee),ci="keydown.dismiss".concat(Ee),li=function(){_inherits(i,U);var n=_createSuper(i);function i(e,t){return _classCallCheck(this,i),(e=n.call(this,e))._config=e._getConfig(t),e._isShown=!1,e._backdrop=e._initializeBackDrop(),e._addEventListeners(),e}return _createClass(i,[{key:"toggle",value:function(e){return this._isShown?this.hide():this.show(e)}},{key:"show",value:function(e){var t=this;this._isShown||H.trigger(this._element,ni,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._element.style.visibility="visible",this._backdrop.show(),this._config.scroll||((new Ln).hide(),this._enforceFocusOnElement(this._element)),this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add("show"),this._queueCallback(function(){H.trigger(t._element,ii,{relatedTarget:e})},this._element,!0))}},{key:"hide",value:function(){var e=this;this._isShown&&(H.trigger(this._element,oi).defaultPrevented||(H.off(document,ai),this._element.blur(),this._isShown=!1,this._element.classList.remove("show"),this._backdrop.hide(),this._queueCallback(function(){e._element.setAttribute("aria-hidden",!0),e._element.removeAttribute("aria-modal"),e._element.removeAttribute("role"),e._element.style.visibility="hidden",e._config.scroll||(new Ln).reset(),H.trigger(e._element,ri)},this._element,!0)))}},{key:"dispose",value:function(){this._backdrop.dispose(),_get(_getPrototypeOf(i.prototype),"dispose",this).call(this),H.off(document,ai)}},{key:"_getConfig",value:function(e){return e=_objectSpread(_objectSpread(_objectSpread({},Jn),te.getDataAttributes(this._element)),"object"===_typeof(e)?e:{}),h(Zn,e,ei),e}},{key:"_initializeBackDrop",value:function(){var e=this;return new Pn({isVisible:this._config.backdrop,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:function(){return e.hide()}})}},{key:"_enforceFocusOnElement",value:function(t){H.off(document,ai),H.on(document,ai,function(e){document===e.target||t===e.target||t.contains(e.target)||t.focus()}),t.focus()}},{key:"_addEventListeners",value:function(){var t=this;H.on(this._element,si,'[data-bs-dismiss="offcanvas"]',function(){return t.hide()}),H.on(this._element,ci,function(e){t._config.keyboard&&"Escape"===e.key&&t.hide()})}}],[{key:"NAME",get:function(){return Zn}},{key:"Default",get:function(){return Jn}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=i.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError('No method named "'.concat(t,'"'));e[t](this)}})}}]),i}();H.on(document,je,'[data-bs-toggle="offcanvas"]',function(e){var t=this,n=a(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),l(this)||(H.one(n,ri,function(){i(t)&&t.focus()}),(e=y.findOne(ti))&&e!==n&&li.getInstance(e).hide(),li.getOrCreateInstance(n).toggle(this))}),H.on(window,Re,function(){return y.find(ti).forEach(function(e){return li.getOrCreateInstance(e).show()})}),e(li);var ui=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),fi=/^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/i,di=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,je={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]};function hi(e,r,t){if(!e.length)return e;if(t&&"function"==typeof t)return t(e);for(var t=(new window.DOMParser).parseFromString(e,"text/html"),a=Object.keys(r),s=(e=[]).concat.apply(e,_toConsumableArray(t.body.querySelectorAll("*"))),n=function(e,t){var n=s[e],i=n.nodeName.toLowerCase();if(!a.includes(i))return n.remove(),"continue";var e=(e=[]).concat.apply(e,_toConsumableArray(n.attributes)),o=[].concat(r["*"]||[],r[i]||[]);e.forEach(function(e){!function(e,t){var n=e.nodeName.toLowerCase();if(t.includes(n))return!ui.has(n)||Boolean(fi.test(e.nodeValue)||di.test(e.nodeValue));for(var i=t.filter(function(e){return e instanceof RegExp}),o=0,r=i.length;o<r;o++)if(i[o].test(n))return!0;return!1}(e,o)&&n.removeAttribute(e.nodeName)})},i=0,o=s.length;i<o;i++)n(i);return t.body.innerHTML}var pi="tooltip",Re=".".concat("bs.tooltip"),gi="bs-tooltip",mi=new RegExp("(^|\\s)".concat(gi,"\\S+"),"g"),_i=new Set(["sanitize","allowList","sanitizeFn"]),vi={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},yi={AUTO:"auto",TOP:"top",RIGHT:m()?"left":"right",BOTTOM:"bottom",LEFT:m()?"right":"left"},bi={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:je,popperConfig:null},ki={HIDE:"hide".concat(Re),HIDDEN:"hidden".concat(Re),SHOW:"show".concat(Re),SHOWN:"shown".concat(Re),INSERTED:"inserted".concat(Re),CLICK:"click".concat(Re),FOCUSIN:"focusin".concat(Re),FOCUSOUT:"focusout".concat(Re),MOUSEENTER:"mouseenter".concat(Re),MOUSELEAVE:"mouseleave".concat(Re)},wi="fade",Ei="show",Oi="show",Ai="hover",Ci="focus",Ti=function(){_inherits(i,U);var n=_createSuper(i);function i(e,t){if(_classCallCheck(this,i),void 0===on)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");return(e=n.call(this,e))._isEnabled=!0,e._timeout=0,e._hoverState="",e._activeTrigger={},e._popper=null,e._config=e._getConfig(t),e.tip=null,e._setListeners(),e}return _createClass(i,[{key:"enable",value:function(){this._isEnabled=!0}},{key:"disable",value:function(){this._isEnabled=!1}},{key:"toggleEnabled",value:function(){this._isEnabled=!this._isEnabled}},{key:"toggle",value:function(e){this._isEnabled&&(e?((e=this._initializeOnDelegatedTarget(e))._activeTrigger.click=!e._activeTrigger.click,e._isWithActiveTrigger()?e._enter(null,e):e._leave(null,e)):this.getTipElement().classList.contains(Ei)?this._leave(null,this):this._enter(null,this))}},{key:"dispose",value:function(){clearTimeout(this._timeout),H.off(this._element.closest(".".concat("modal")),"hide.bs.modal",this._hideModalHandler),this.tip&&this.tip.remove(),this._popper&&this._popper.destroy(),_get(_getPrototypeOf(i.prototype),"dispose",this).call(this)}},{key:"show",value:function(){var e,t,n,i,o=this;if("none"===this._element.style.display)throw new Error("Please use show on visible elements");this.isWithContent()&&this._isEnabled&&(t=H.trigger(this._element,this.constructor.Event.SHOW),e=(null===(n=c(this._element))?this._element.ownerDocument.documentElement:n).contains(this._element),!t.defaultPrevented&&e&&(n=this.getTipElement(),t=r(this.constructor.NAME),n.setAttribute("id",t),this._element.setAttribute("aria-describedby",t),this.setContent(),this._config.animation&&n.classList.add(wi),e="function"==typeof this._config.placement?this._config.placement.call(this,n,this._element):this._config.placement,t=this._getAttachment(e),this._addAttachmentClass(t),e=this._config.container,W(n,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||(e.appendChild(n),H.trigger(this._element,this.constructor.Event.INSERTED)),this._popper?this._popper.update():this._popper=nn(this._element,n,this._getPopperConfig(t)),n.classList.add(Ei),(t="function"==typeof this._config.customClass?this._config.customClass():this._config.customClass)&&(n=n.classList).add.apply(n,_toConsumableArray(t.split(" "))),"ontouchstart"in document.documentElement&&(i=[]).concat.apply(i,_toConsumableArray(document.body.children)).forEach(function(e){H.on(e,"mouseover",u)}),i=this.tip.classList.contains(wi),this._queueCallback(function(){var e=o._hoverState;o._hoverState=null,H.trigger(o._element,o.constructor.Event.SHOWN),"out"===e&&o._leave(null,o)},this.tip,i)))}},{key:"hide",value:function(){var e,t,n=this;this._popper&&(e=this.getTipElement(),H.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented||(e.classList.remove(Ei),"ontouchstart"in document.documentElement&&(t=[]).concat.apply(t,_toConsumableArray(document.body.children)).forEach(function(e){return H.off(e,"mouseover",u)}),this._activeTrigger.click=!1,this._activeTrigger[Ci]=!1,this._activeTrigger[Ai]=!1,t=this.tip.classList.contains(wi),this._queueCallback(function(){n._isWithActiveTrigger()||(n._hoverState!==Oi&&e.remove(),n._cleanTipClass(),n._element.removeAttribute("aria-describedby"),H.trigger(n._element,n.constructor.Event.HIDDEN),n._popper&&(n._popper.destroy(),n._popper=null))},this.tip,t),this._hoverState=""))}},{key:"update",value:function(){null!==this._popper&&this._popper.update()}},{key:"isWithContent",value:function(){return Boolean(this.getTitle())}},{key:"getTipElement",value:function(){if(this.tip)return this.tip;var e=document.createElement("div");return e.innerHTML=this._config.template,this.tip=e.children[0],this.tip}},{key:"setContent",value:function(){var e=this.getTipElement();this.setElementContent(y.findOne(".tooltip-inner",e),this.getTitle()),e.classList.remove(wi,Ei)}},{key:"setElementContent",value:function(e,t){if(null!==e)return w(t)?(t=d(t),void(this._config.html?t.parentNode!==e&&(e.innerHTML="",e.appendChild(t)):e.textContent=t.textContent)):void(this._config.html?(this._config.sanitize&&(t=hi(t,this._config.allowList,this._config.sanitizeFn)),e.innerHTML=t):e.textContent=t)}},{key:"getTitle",value:function(){return this._element.getAttribute("data-bs-original-title")||("function"==typeof this._config.title?this._config.title.call(this._element):this._config.title)}},{key:"updateAttachment",value:function(e){return"right"===e?"end":"left"===e?"start":e}},{key:"_initializeOnDelegatedTarget",value:function(e,t){var n=this.constructor.DATA_KEY;return(t=t||q(e.delegateTarget,n))||(t=new this.constructor(e.delegateTarget,this._getDelegateConfig()),W(e.delegateTarget,n,t)),t}},{key:"_getOffset",value:function(){var t=this,n=this._config.offset;return"string"==typeof n?n.split(",").map(function(e){return Number.parseInt(e,10)}):"function"==typeof n?function(e){return n(e,t._element)}:n}},{key:"_getPopperConfig",value:function(e){var t=this,e={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:".".concat(this.constructor.NAME,"-arrow")}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:function(e){return t._handlePopperPlacementChange(e)}}],onFirstUpdate:function(e){e.options.placement!==e.placement&&t._handlePopperPlacementChange(e)}};return _objectSpread(_objectSpread({},e),"function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig)}},{key:"_addAttachmentClass",value:function(e){this.getTipElement().classList.add("".concat(gi,"-").concat(this.updateAttachment(e)))}},{key:"_getAttachment",value:function(e){return yi[e.toUpperCase()]}},{key:"_setListeners",value:function(){var n=this;this._config.trigger.split(" ").forEach(function(e){var t;"click"===e?H.on(n._element,n.constructor.Event.CLICK,n._config.selector,function(e){return n.toggle(e)}):"manual"!==e&&(t=e===Ai?n.constructor.Event.MOUSEENTER:n.constructor.Event.FOCUSIN,e=e===Ai?n.constructor.Event.MOUSELEAVE:n.constructor.Event.FOCUSOUT,H.on(n._element,t,n._config.selector,function(e){return n._enter(e)}),H.on(n._element,e,n._config.selector,function(e){return n._leave(e)}))}),this._hideModalHandler=function(){n._element&&n.hide()},H.on(this._element.closest(".".concat("modal")),"hide.bs.modal",this._hideModalHandler),this._config.selector?this._config=_objectSpread(_objectSpread({},this._config),{},{trigger:"manual",selector:""}):this._fixTitle()}},{key:"_fixTitle",value:function(){var e=this._element.getAttribute("title"),t=_typeof(this._element.getAttribute("data-bs-original-title"));!e&&"string"===t||(this._element.setAttribute("data-bs-original-title",e||""),!e||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",e),this._element.setAttribute("title",""))}},{key:"_enter",value:function(e,t){t=this._initializeOnDelegatedTarget(e,t),e&&(t._activeTrigger["focusin"===e.type?Ci:Ai]=!0),t.getTipElement().classList.contains(Ei)||t._hoverState===Oi?t._hoverState=Oi:(clearTimeout(t._timeout),t._hoverState=Oi,t._config.delay&&t._config.delay.show?t._timeout=setTimeout(function(){t._hoverState===Oi&&t.show()},t._config.delay.show):t.show())}},{key:"_leave",value:function(e,t){t=this._initializeOnDelegatedTarget(e,t),e&&(t._activeTrigger["focusout"===e.type?Ci:Ai]=t._element.contains(e.relatedTarget)),t._isWithActiveTrigger()||(clearTimeout(t._timeout),t._hoverState="out",t._config.delay&&t._config.delay.hide?t._timeout=setTimeout(function(){"out"===t._hoverState&&t.hide()},t._config.delay.hide):t.hide())}},{key:"_isWithActiveTrigger",value:function(){for(var e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1}},{key:"_getConfig",value:function(e){var t=te.getDataAttributes(this._element);return Object.keys(t).forEach(function(e){_i.has(e)&&delete t[e]}),(e=_objectSpread(_objectSpread(_objectSpread({},this.constructor.Default),t),"object"===_typeof(e)&&e?e:{})).container=!1===e.container?document.body:d(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),h(pi,e,this.constructor.DefaultType),e.sanitize&&(e.template=hi(e.template,e.allowList,e.sanitizeFn)),e}},{key:"_getDelegateConfig",value:function(){var e={};if(this._config)for(var t in this._config)this.constructor.Default[t]!==this._config[t]&&(e[t]=this._config[t]);return e}},{key:"_cleanTipClass",value:function(){var t=this.getTipElement(),e=t.getAttribute("class").match(mi);null!==e&&0<e.length&&e.map(function(e){return e.trim()}).forEach(function(e){return t.classList.remove(e)})}},{key:"_handlePopperPlacementChange",value:function(e){e=e.state;e&&(this.tip=e.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(e.placement)))}}],[{key:"Default",get:function(){return bi}},{key:"NAME",get:function(){return pi}},{key:"Event",get:function(){return ki}},{key:"DefaultType",get:function(){return vi}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=i.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'.concat(t,'"'));e[t]()}})}}]),i}();e(Ti);var je=".".concat("bs.popover"),Si="bs-popover",Li=new RegExp("(^|\\s)".concat(Si,"\\S+"),"g"),ji=_objectSpread(_objectSpread({},Ti.Default),{},{placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),Di=_objectSpread(_objectSpread({},Ti.DefaultType),{},{content:"(string|element|function)"}),xi={HIDE:"hide".concat(je),HIDDEN:"hidden".concat(je),SHOW:"show".concat(je),SHOWN:"shown".concat(je),INSERTED:"inserted".concat(je),CLICK:"click".concat(je),FOCUSIN:"focusin".concat(je),FOCUSOUT:"focusout".concat(je),MOUSEENTER:"mouseenter".concat(je),MOUSELEAVE:"mouseleave".concat(je)},Ii=".popover-header",Pi=".popover-body",Re=function(){_inherits(n,Ti);var e=_createSuper(n);function n(){return _classCallCheck(this,n),e.apply(this,arguments)}return _createClass(n,[{key:"isWithContent",value:function(){return this.getTitle()||this._getContent()}},{key:"getTipElement",value:function(){return this.tip||(this.tip=_get(_getPrototypeOf(n.prototype),"getTipElement",this).call(this),this.getTitle()||y.findOne(Ii,this.tip).remove(),this._getContent()||y.findOne(Pi,this.tip).remove(),this.tip)}},{key:"setContent",value:function(){var e=this.getTipElement();this.setElementContent(y.findOne(Ii,e),this.getTitle());var t=this._getContent();"function"==typeof t&&(t=t.call(this._element)),this.setElementContent(y.findOne(Pi,e),t),e.classList.remove("fade","show")}},{key:"_addAttachmentClass",value:function(e){this.getTipElement().classList.add("".concat(Si,"-").concat(this.updateAttachment(e)))}},{key:"_getContent",value:function(){return this._element.getAttribute("data-bs-content")||this._config.content}},{key:"_cleanTipClass",value:function(){var t=this.getTipElement(),e=t.getAttribute("class").match(Li);null!==e&&0<e.length&&e.map(function(e){return e.trim()}).forEach(function(e){return t.classList.remove(e)})}}],[{key:"Default",get:function(){return ji}},{key:"NAME",get:function(){return"popover"}},{key:"Event",get:function(){return xi}},{key:"DefaultType",get:function(){return Di}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=n.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'.concat(t,'"'));e[t]()}})}}]),n}();e(Re);var Ni="scrollspy",Mi=".".concat("bs.scrollspy"),Ri={offset:10,method:"auto",target:""},Hi={offset:"number",method:"string",target:"(string|element)"},Bi="activate".concat(Mi),Wi="scroll".concat(Mi),je="load".concat(Mi).concat(".data-api"),qi="dropdown-item",zi="active",Ui=".nav-link",Fi=".list-group-item",Vi="position",Ki=function(){_inherits(o,U);var i=_createSuper(o);function o(e,t){var n;return _classCallCheck(this,o),(n=i.call(this,e))._scrollElement="BODY"===n._element.tagName?window:n._element,n._config=n._getConfig(t),n._selector="".concat(n._config.target," ").concat(Ui,", ").concat(n._config.target," ").concat(Fi,", ").concat(n._config.target," .").concat(qi),n._offsets=[],n._targets=[],n._activeTarget=null,n._scrollHeight=0,H.on(n._scrollElement,Wi,function(){return n._process()}),n.refresh(),n._process(),n}return _createClass(o,[{key:"refresh",value:function(){var t=this,e=this._scrollElement===this._scrollElement.window?"offset":Vi,i="auto"===this._config.method?e:this._config.method,o=i===Vi?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),y.find(this._selector).map(function(e){var t=f(e),n=t?y.findOne(t):null;if(n){e=n.getBoundingClientRect();if(e.width||e.height)return[te[i](n).top+o,t]}return null}).filter(function(e){return e}).sort(function(e,t){return e[0]-t[0]}).forEach(function(e){t._offsets.push(e[0]),t._targets.push(e[1])})}},{key:"dispose",value:function(){H.off(this._scrollElement,Mi),_get(_getPrototypeOf(o.prototype),"dispose",this).call(this)}},{key:"_getConfig",value:function(e){var t;return"string"!=typeof(e=_objectSpread(_objectSpread(_objectSpread({},Ri),te.getDataAttributes(this._element)),"object"===_typeof(e)&&e?e:{})).target&&w(e.target)&&((t=e.target.id)||(t=r(Ni),e.target.id=t),e.target="#".concat(t)),h(Ni,e,Hi),e}},{key:"_getScrollTop",value:function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}},{key:"_getScrollHeight",value:function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}},{key:"_getOffsetHeight",value:function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}},{key:"_process",value:function(){var e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),n=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),n<=e){n=this._targets[this._targets.length-1];this._activeTarget!==n&&this._activate(n)}else{if(this._activeTarget&&e<this._offsets[0]&&0<this._offsets[0])return this._activeTarget=null,void this._clear();for(var i=this._offsets.length;i--;)this._activeTarget!==this._targets[i]&&e>=this._offsets[i]&&(void 0===this._offsets[i+1]||e<this._offsets[i+1])&&this._activate(this._targets[i])}}},{key:"_activate",value:function(t){this._activeTarget=t,this._clear();var e=this._selector.split(",").map(function(e){return"".concat(e,'[data-bs-target="').concat(t,'"],').concat(e,'[href="').concat(t,'"]')}),e=y.findOne(e.join(","));e.classList.contains(qi)?(y.findOne(".dropdown-toggle",e.closest(".dropdown")).classList.add(zi),e.classList.add(zi)):(e.classList.add(zi),y.parents(e,".nav, .list-group").forEach(function(e){y.prev(e,"".concat(Ui,", ").concat(Fi)).forEach(function(e){return e.classList.add(zi)}),y.prev(e,".nav-item").forEach(function(e){y.children(e,Ui).forEach(function(e){return e.classList.add(zi)})})})),H.trigger(this._scrollElement,Bi,{relatedTarget:t})}},{key:"_clear",value:function(){y.find(this._selector).filter(function(e){return e.classList.contains(zi)}).forEach(function(e){return e.classList.remove(zi)})}}],[{key:"Default",get:function(){return Ri}},{key:"NAME",get:function(){return Ni}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=o.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'.concat(t,'"'));e[t]()}})}}]),o}();H.on(window,je,function(){y.find('[data-bs-spy="scroll"]').forEach(function(e){return new Ki(e)})}),e(Ki);var je=".".concat("bs.tab"),Xi="hide".concat(je),Yi="hidden".concat(je),Qi="show".concat(je),$i="shown".concat(je),je="click".concat(je).concat(".data-api"),Gi="active",Zi=".active",Ji=":scope > li > .active",eo=function(){_inherits(n,U);var e=_createSuper(n);function n(){return _classCallCheck(this,n),e.apply(this,arguments)}return _createClass(n,[{key:"show",value:function(){var e,t,n,i,o=this;this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&this._element.classList.contains(Gi)||(e=a(this._element),(i=this._element.closest(".nav, .list-group"))&&(n="UL"===i.nodeName||"OL"===i.nodeName?Ji:Zi,t=(t=y.find(n,i))[t.length-1]),n=t?H.trigger(t,Xi,{relatedTarget:this._element}):null,H.trigger(this._element,Qi,{relatedTarget:t}).defaultPrevented||null!==n&&n.defaultPrevented||(this._activate(this._element,i),i=function(){H.trigger(t,Yi,{relatedTarget:o._element}),H.trigger(o._element,$i,{relatedTarget:t})},e?this._activate(e,e.parentNode,i):i()))}},{key:"_activate",value:function(e,t,n){var i=this,o=(!t||"UL"!==t.nodeName&&"OL"!==t.nodeName?y.children(t,Zi):y.find(Ji,t))[0],r=n&&o&&o.classList.contains("fade"),t=function(){return i._transitionComplete(e,o,n)};o&&r?(o.classList.remove("show"),this._queueCallback(t,e,!0)):t()}},{key:"_transitionComplete",value:function(e,t,n){var i;t&&(t.classList.remove(Gi),(i=y.findOne(":scope > .dropdown-menu .active",t.parentNode))&&i.classList.remove(Gi),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!1)),e.classList.add(Gi),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),p(e),e.classList.contains("fade")&&e.classList.add("show");t=e.parentNode;(t=t&&"LI"===t.nodeName?t.parentNode:t)&&t.classList.contains("dropdown-menu")&&((t=e.closest(".dropdown"))&&y.find(".dropdown-toggle",t).forEach(function(e){return e.classList.add(Gi)}),e.setAttribute("aria-expanded",!0)),n&&n()}}],[{key:"NAME",get:function(){return"tab"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=n.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'.concat(t,'"'));e[t]()}})}}]),n}();H.on(document,je,'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),l(this)||eo.getOrCreateInstance(this).show()}),e(eo);var je=".".concat("bs.toast"),to="click.dismiss".concat(je),no="mouseover".concat(je),io="mouseout".concat(je),oo="focusin".concat(je),ro="focusout".concat(je),ao="hide".concat(je),so="hidden".concat(je),co="show".concat(je),lo="shown".concat(je),uo="show",fo="showing",ho={animation:"boolean",autohide:"boolean",delay:"number"},po={animation:!0,autohide:!0,delay:5e3},je=function(){_inherits(i,U);var n=_createSuper(i);function i(e,t){return _classCallCheck(this,i),(e=n.call(this,e))._config=e._getConfig(t),e._timeout=null,e._hasMouseInteraction=!1,e._hasKeyboardInteraction=!1,e._setListeners(),e}return _createClass(i,[{key:"show",value:function(){var e=this;H.trigger(this._element,co).defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove("hide"),p(this._element),this._element.classList.add(fo),this._queueCallback(function(){e._element.classList.remove(fo),e._element.classList.add(uo),H.trigger(e._element,lo),e._maybeScheduleHide()},this._element,this._config.animation))}},{key:"hide",value:function(){var e=this;this._element.classList.contains(uo)&&(H.trigger(this._element,ao).defaultPrevented||(this._element.classList.remove(uo),this._queueCallback(function(){e._element.classList.add("hide"),H.trigger(e._element,so)},this._element,this._config.animation)))}},{key:"dispose",value:function(){this._clearTimeout(),this._element.classList.contains(uo)&&this._element.classList.remove(uo),_get(_getPrototypeOf(i.prototype),"dispose",this).call(this)}},{key:"_getConfig",value:function(e){return e=_objectSpread(_objectSpread(_objectSpread({},po),te.getDataAttributes(this._element)),"object"===_typeof(e)&&e?e:{}),h("toast",e,this.constructor.DefaultType),e}},{key:"_maybeScheduleHide",value:function(){var e=this;this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout(function(){e.hide()},this._config.delay)))}},{key:"_onInteraction",value:function(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}t?this._clearTimeout():(e=e.relatedTarget,this._element===e||this._element.contains(e)||this._maybeScheduleHide())}},{key:"_setListeners",value:function(){var t=this;H.on(this._element,to,'[data-bs-dismiss="toast"]',function(){return t.hide()}),H.on(this._element,no,function(e){return t._onInteraction(e,!0)}),H.on(this._element,io,function(e){return t._onInteraction(e,!1)}),H.on(this._element,oo,function(e){return t._onInteraction(e,!0)}),H.on(this._element,ro,function(e){return t._onInteraction(e,!1)})}},{key:"_clearTimeout",value:function(){clearTimeout(this._timeout),this._timeout=null}}],[{key:"DefaultType",get:function(){return ho}},{key:"Default",get:function(){return po}},{key:"NAME",get:function(){return"toast"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=i.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'.concat(t,'"'));e[t](this)}})}}]),i}();return e(je),{Alert:Y,Button:Z,Carousel:Te,Collapse:Ue,Dropdown:Cn,Modal:Gn,Offcanvas:li,Popover:Re,ScrollSpy:Ki,Tab:eo,Toast:je,Tooltip:Ti}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
